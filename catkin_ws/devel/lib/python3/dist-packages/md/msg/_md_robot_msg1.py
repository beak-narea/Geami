# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from md/md_robot_msg1.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class md_robot_msg1(genpy.Message):
  _md5sum = "5f9c226b917ed3bb79f983ee199f83ed"
  _type = "md/md_robot_msg1"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 interval_time
int16 motor1_rpm
int32 motor1_pos
int16 motor2_rpm
int32 motor2_pos
uint8 motor1_state
uint8 motor2_state
float32 input_voltage"""
  __slots__ = ['interval_time','motor1_rpm','motor1_pos','motor2_rpm','motor2_pos','motor1_state','motor2_state','input_voltage']
  _slot_types = ['float64','int16','int32','int16','int32','uint8','uint8','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       interval_time,motor1_rpm,motor1_pos,motor2_rpm,motor2_pos,motor1_state,motor2_state,input_voltage

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(md_robot_msg1, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.interval_time is None:
        self.interval_time = 0.
      if self.motor1_rpm is None:
        self.motor1_rpm = 0
      if self.motor1_pos is None:
        self.motor1_pos = 0
      if self.motor2_rpm is None:
        self.motor2_rpm = 0
      if self.motor2_pos is None:
        self.motor2_pos = 0
      if self.motor1_state is None:
        self.motor1_state = 0
      if self.motor2_state is None:
        self.motor2_state = 0
      if self.input_voltage is None:
        self.input_voltage = 0.
    else:
      self.interval_time = 0.
      self.motor1_rpm = 0
      self.motor1_pos = 0
      self.motor2_rpm = 0
      self.motor2_pos = 0
      self.motor1_state = 0
      self.motor2_state = 0
      self.input_voltage = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_dhihi2Bf().pack(_x.interval_time, _x.motor1_rpm, _x.motor1_pos, _x.motor2_rpm, _x.motor2_pos, _x.motor1_state, _x.motor2_state, _x.input_voltage))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.interval_time, _x.motor1_rpm, _x.motor1_pos, _x.motor2_rpm, _x.motor2_pos, _x.motor1_state, _x.motor2_state, _x.input_voltage,) = _get_struct_dhihi2Bf().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_dhihi2Bf().pack(_x.interval_time, _x.motor1_rpm, _x.motor1_pos, _x.motor2_rpm, _x.motor2_pos, _x.motor1_state, _x.motor2_state, _x.input_voltage))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.interval_time, _x.motor1_rpm, _x.motor1_pos, _x.motor2_rpm, _x.motor2_pos, _x.motor1_state, _x.motor2_state, _x.input_voltage,) = _get_struct_dhihi2Bf().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_dhihi2Bf = None
def _get_struct_dhihi2Bf():
    global _struct_dhihi2Bf
    if _struct_dhihi2Bf is None:
        _struct_dhihi2Bf = struct.Struct("<dhihi2Bf")
    return _struct_dhihi2Bf
