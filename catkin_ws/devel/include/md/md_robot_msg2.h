// Generated by gencpp from file md/md_robot_msg2.msg
// DO NOT EDIT!


#ifndef MD_MESSAGE_MD_ROBOT_MSG2_H
#define MD_MESSAGE_MD_ROBOT_MSG2_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace md
{
template <class ContainerAllocator>
struct md_robot_msg2_
{
  typedef md_robot_msg2_<ContainerAllocator> Type;

  md_robot_msg2_()
    : interval_time(0.0)
    , x_pos(0)
    , y_pos(0)
    , angule(0)
    , US_1(0)
    , US_2(0)
    , US_3(0)
    , US_4(0)
    , platform_state(0)
    , linear_velocity(0)
    , angular_velocity(0)
    , input_voltage(0.0)  {
    }
  md_robot_msg2_(const ContainerAllocator& _alloc)
    : interval_time(0.0)
    , x_pos(0)
    , y_pos(0)
    , angule(0)
    , US_1(0)
    , US_2(0)
    , US_3(0)
    , US_4(0)
    , platform_state(0)
    , linear_velocity(0)
    , angular_velocity(0)
    , input_voltage(0.0)  {
  (void)_alloc;
    }



   typedef double _interval_time_type;
  _interval_time_type interval_time;

   typedef int32_t _x_pos_type;
  _x_pos_type x_pos;

   typedef int32_t _y_pos_type;
  _y_pos_type y_pos;

   typedef int16_t _angule_type;
  _angule_type angule;

   typedef uint8_t _US_1_type;
  _US_1_type US_1;

   typedef uint8_t _US_2_type;
  _US_2_type US_2;

   typedef uint8_t _US_3_type;
  _US_3_type US_3;

   typedef uint8_t _US_4_type;
  _US_4_type US_4;

   typedef uint8_t _platform_state_type;
  _platform_state_type platform_state;

   typedef int16_t _linear_velocity_type;
  _linear_velocity_type linear_velocity;

   typedef int16_t _angular_velocity_type;
  _angular_velocity_type angular_velocity;

   typedef float _input_voltage_type;
  _input_voltage_type input_voltage;





  typedef boost::shared_ptr< ::md::md_robot_msg2_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::md::md_robot_msg2_<ContainerAllocator> const> ConstPtr;

}; // struct md_robot_msg2_

typedef ::md::md_robot_msg2_<std::allocator<void> > md_robot_msg2;

typedef boost::shared_ptr< ::md::md_robot_msg2 > md_robot_msg2Ptr;
typedef boost::shared_ptr< ::md::md_robot_msg2 const> md_robot_msg2ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::md::md_robot_msg2_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::md::md_robot_msg2_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::md::md_robot_msg2_<ContainerAllocator1> & lhs, const ::md::md_robot_msg2_<ContainerAllocator2> & rhs)
{
  return lhs.interval_time == rhs.interval_time &&
    lhs.x_pos == rhs.x_pos &&
    lhs.y_pos == rhs.y_pos &&
    lhs.angule == rhs.angule &&
    lhs.US_1 == rhs.US_1 &&
    lhs.US_2 == rhs.US_2 &&
    lhs.US_3 == rhs.US_3 &&
    lhs.US_4 == rhs.US_4 &&
    lhs.platform_state == rhs.platform_state &&
    lhs.linear_velocity == rhs.linear_velocity &&
    lhs.angular_velocity == rhs.angular_velocity &&
    lhs.input_voltage == rhs.input_voltage;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::md::md_robot_msg2_<ContainerAllocator1> & lhs, const ::md::md_robot_msg2_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace md

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::md::md_robot_msg2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::md::md_robot_msg2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::md::md_robot_msg2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::md::md_robot_msg2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::md::md_robot_msg2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::md::md_robot_msg2_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::md::md_robot_msg2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "de9f2ebda4cc402f2af0c2ecca0409bf";
  }

  static const char* value(const ::md::md_robot_msg2_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xde9f2ebda4cc402fULL;
  static const uint64_t static_value2 = 0x2af0c2ecca0409bfULL;
};

template<class ContainerAllocator>
struct DataType< ::md::md_robot_msg2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "md/md_robot_msg2";
  }

  static const char* value(const ::md::md_robot_msg2_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::md::md_robot_msg2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 interval_time\n"
"int32 x_pos\n"
"int32 y_pos\n"
"int16 angule\n"
"uint8 US_1\n"
"uint8 US_2\n"
"uint8 US_3\n"
"uint8 US_4\n"
"uint8 platform_state\n"
"int16 linear_velocity\n"
"int16 angular_velocity\n"
"float32 input_voltage\n"
"\n"
"\n"
;
  }

  static const char* value(const ::md::md_robot_msg2_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::md::md_robot_msg2_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.interval_time);
      stream.next(m.x_pos);
      stream.next(m.y_pos);
      stream.next(m.angule);
      stream.next(m.US_1);
      stream.next(m.US_2);
      stream.next(m.US_3);
      stream.next(m.US_4);
      stream.next(m.platform_state);
      stream.next(m.linear_velocity);
      stream.next(m.angular_velocity);
      stream.next(m.input_voltage);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct md_robot_msg2_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::md::md_robot_msg2_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::md::md_robot_msg2_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "interval_time: ";
    Printer<double>::stream(s, indent + "  ", v.interval_time);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "x_pos: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x_pos);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "y_pos: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y_pos);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "angule: ";
    Printer<int16_t>::stream(s, indent + "  ", v.angule);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "US_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.US_1);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "US_2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.US_2);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "US_3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.US_3);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "US_4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.US_4);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "platform_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.platform_state);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "linear_velocity: ";
    Printer<int16_t>::stream(s, indent + "  ", v.linear_velocity);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "angular_velocity: ";
    Printer<int16_t>::stream(s, indent + "  ", v.angular_velocity);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "input_voltage: ";
    Printer<float>::stream(s, indent + "  ", v.input_voltage);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MD_MESSAGE_MD_ROBOT_MSG2_H
