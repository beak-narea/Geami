// Generated by gencpp from file md/md_robot_msg1.msg
// DO NOT EDIT!


#ifndef MD_MESSAGE_MD_ROBOT_MSG1_H
#define MD_MESSAGE_MD_ROBOT_MSG1_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace md
{
template <class ContainerAllocator>
struct md_robot_msg1_
{
  typedef md_robot_msg1_<ContainerAllocator> Type;

  md_robot_msg1_()
    : interval_time(0.0)
    , motor1_rpm(0)
    , motor1_pos(0)
    , motor2_rpm(0)
    , motor2_pos(0)
    , motor1_state(0)
    , motor2_state(0)
    , input_voltage(0.0)  {
    }
  md_robot_msg1_(const ContainerAllocator& _alloc)
    : interval_time(0.0)
    , motor1_rpm(0)
    , motor1_pos(0)
    , motor2_rpm(0)
    , motor2_pos(0)
    , motor1_state(0)
    , motor2_state(0)
    , input_voltage(0.0)  {
  (void)_alloc;
    }



   typedef double _interval_time_type;
  _interval_time_type interval_time;

   typedef int16_t _motor1_rpm_type;
  _motor1_rpm_type motor1_rpm;

   typedef int32_t _motor1_pos_type;
  _motor1_pos_type motor1_pos;

   typedef int16_t _motor2_rpm_type;
  _motor2_rpm_type motor2_rpm;

   typedef int32_t _motor2_pos_type;
  _motor2_pos_type motor2_pos;

   typedef uint8_t _motor1_state_type;
  _motor1_state_type motor1_state;

   typedef uint8_t _motor2_state_type;
  _motor2_state_type motor2_state;

   typedef float _input_voltage_type;
  _input_voltage_type input_voltage;





  typedef boost::shared_ptr< ::md::md_robot_msg1_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::md::md_robot_msg1_<ContainerAllocator> const> ConstPtr;

}; // struct md_robot_msg1_

typedef ::md::md_robot_msg1_<std::allocator<void> > md_robot_msg1;

typedef boost::shared_ptr< ::md::md_robot_msg1 > md_robot_msg1Ptr;
typedef boost::shared_ptr< ::md::md_robot_msg1 const> md_robot_msg1ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::md::md_robot_msg1_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::md::md_robot_msg1_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::md::md_robot_msg1_<ContainerAllocator1> & lhs, const ::md::md_robot_msg1_<ContainerAllocator2> & rhs)
{
  return lhs.interval_time == rhs.interval_time &&
    lhs.motor1_rpm == rhs.motor1_rpm &&
    lhs.motor1_pos == rhs.motor1_pos &&
    lhs.motor2_rpm == rhs.motor2_rpm &&
    lhs.motor2_pos == rhs.motor2_pos &&
    lhs.motor1_state == rhs.motor1_state &&
    lhs.motor2_state == rhs.motor2_state &&
    lhs.input_voltage == rhs.input_voltage;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::md::md_robot_msg1_<ContainerAllocator1> & lhs, const ::md::md_robot_msg1_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace md

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::md::md_robot_msg1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::md::md_robot_msg1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::md::md_robot_msg1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::md::md_robot_msg1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::md::md_robot_msg1_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::md::md_robot_msg1_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::md::md_robot_msg1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5f9c226b917ed3bb79f983ee199f83ed";
  }

  static const char* value(const ::md::md_robot_msg1_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5f9c226b917ed3bbULL;
  static const uint64_t static_value2 = 0x79f983ee199f83edULL;
};

template<class ContainerAllocator>
struct DataType< ::md::md_robot_msg1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "md/md_robot_msg1";
  }

  static const char* value(const ::md::md_robot_msg1_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::md::md_robot_msg1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 interval_time\n"
"int16 motor1_rpm\n"
"int32 motor1_pos\n"
"int16 motor2_rpm\n"
"int32 motor2_pos\n"
"uint8 motor1_state\n"
"uint8 motor2_state\n"
"float32 input_voltage\n"
;
  }

  static const char* value(const ::md::md_robot_msg1_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::md::md_robot_msg1_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.interval_time);
      stream.next(m.motor1_rpm);
      stream.next(m.motor1_pos);
      stream.next(m.motor2_rpm);
      stream.next(m.motor2_pos);
      stream.next(m.motor1_state);
      stream.next(m.motor2_state);
      stream.next(m.input_voltage);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct md_robot_msg1_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::md::md_robot_msg1_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::md::md_robot_msg1_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "interval_time: ";
    Printer<double>::stream(s, indent + "  ", v.interval_time);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "motor1_rpm: ";
    Printer<int16_t>::stream(s, indent + "  ", v.motor1_rpm);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "motor1_pos: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motor1_pos);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "motor2_rpm: ";
    Printer<int16_t>::stream(s, indent + "  ", v.motor2_rpm);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "motor2_pos: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motor2_pos);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "motor1_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor1_state);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "motor2_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor2_state);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "input_voltage: ";
    Printer<float>::stream(s, indent + "  ", v.input_voltage);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MD_MESSAGE_MD_ROBOT_MSG1_H
